<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:WpfOrderManager"
  xmlns:s="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="ImgSource/SvgSource.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <CollectionViewSource x:Key="ItemCollectionViewSource" CollectionViewType="ListCollectionView" />

    <Style TargetType="Label">
        <Setter Property="FontFamily" Value="Microsoft JhengHei UI" />
    </Style>

    <Style TargetType="TextBlock">
        <Setter Property="FontFamily" Value="Microsoft JhengHei UI" />
    </Style>

    <Style x:Key="MyRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Click">
                            <!--  Value是水波紋大小  -->
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(FrameworkElement.Width)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="30" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(FrameworkElement.Height)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="30" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-15" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-15" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <BulletDecorator
                      Margin="0,1" HorizontalAlignment="Left" Background="#FF756550"
                      Cursor="Hand">
                        <BulletDecorator.Bullet>
                            <Grid Width="11" Height="11">
                                <!--  Define size of the Bullet  -->
                                <!--  The two borders  -->
                                <Border
                                  Name="RadioOuter" Background="Transparent" BorderBrush="#FFF4E9DC"
                                  BorderThickness="1" CornerRadius="20" />
                                <Border
                                  Name="RadioMark" Margin="3" Background="#FFF6AA00"
                                  CornerRadius="20" Visibility="Hidden" />
                                <Canvas
                                  Width="20" Height="20" HorizontalAlignment="Center"
                                  VerticalAlignment="Center">
                                    <Ellipse
                                      x:Name="InteractionEllipse" Canvas.Left="10" Canvas.Top="10"
                                      Width="0" Height="0"
                                      Fill="{TemplateBinding Foreground}"
                                      Opacity="0" RenderTransformOrigin="0.5,0.5">
                                        <Ellipse.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform />
                                                <SkewTransform />
                                                <RotateTransform />
                                                <TranslateTransform />
                                            </TransformGroup>
                                        </Ellipse.RenderTransform>
                                    </Ellipse>
                                </Canvas>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <!--  Text element  -->
                        <TextBlock
                          Margin="10,0,0,0" FontFamily="Segoe UI" FontSize="14"
                          Foreground="#FFF4E9DC">
                            <ContentPresenter />
                        </TextBlock>
                    </BulletDecorator>
                    <!--  If item is checked, trigger the visibility of the mark  -->
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="ButtonBase.Click">
                            <BeginStoryboard Storyboard="{StaticResource Click}" />
                        </EventTrigger>
                        <Trigger Property="IsChecked" Value="true">
                            <!--  If item is checked, trigger the visibility of the mark and change the color of the selected bullet into a darker gray for better highlighting  -->
                            <Setter TargetName="RadioMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="RadioOuter" Property="BorderBrush" Value="#FFADADAD" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CreatRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Click">
                            <!--  Value是水波紋大小  -->
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(FrameworkElement.Width)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="40" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(FrameworkElement.Height)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="40" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-20" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-20" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <BulletDecorator
                      Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center"
                      Background="Transparent" Cursor="Hand">
                        <BulletDecorator.Bullet>
                            <Grid Width="12" Height="12">
                                <!--  Define size of the Bullet  -->
                                <!--  The two borders  -->
                                <Border
                                  Name="RadioOuter" Background="White" BorderBrush="#FFB3B3B3"
                                  BorderThickness="1" CornerRadius="20" />
                                <Border
                                  Name="RadioMark" Margin="3" Background="#FFF6AA00"
                                  CornerRadius="20" Visibility="Hidden" />
                                <Canvas
                                  Width="20" Height="20" HorizontalAlignment="Center"
                                  VerticalAlignment="Center">
                                    <Ellipse
                                      x:Name="InteractionEllipse" Canvas.Left="10" Canvas.Top="10"
                                      Width="0" Height="0"
                                      Fill="{TemplateBinding Foreground}"
                                      Opacity="0" RenderTransformOrigin="0.5,0.5">
                                        <Ellipse.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform />
                                                <SkewTransform />
                                                <RotateTransform />
                                                <TranslateTransform />
                                            </TransformGroup>
                                        </Ellipse.RenderTransform>
                                    </Ellipse>
                                </Canvas>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <!--  Text element  -->
                        <TextBlock
                          Margin="10,0,0,0" FontFamily="Segoe UI" FontSize="14"
                          Foreground="#FF483E34">
                            <ContentPresenter />
                        </TextBlock>
                    </BulletDecorator>
                    <!--  If item is checked, trigger the visibility of the mark  -->
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="ButtonBase.Click">
                            <BeginStoryboard Storyboard="{StaticResource Click}" />
                        </EventTrigger>
                        <Trigger Property="IsChecked" Value="true">
                            <!--  If item is checked, trigger the visibility of the mark and change the color of the selected bullet into a darker gray for better highlighting  -->
                            <Setter TargetName="RadioMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="RadioOuter" Property="BorderBrush" Value="#FFADADAD" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="systemButton" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="35" />
        <Setter Property="Height" Value="30" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="mimimizeButton" BasedOn="{StaticResource systemButton}" TargetType="{x:Type Button}">
        <Setter Property="Background">
            <Setter.Value>
                <ImageBrush ImageSource="{StaticResource Min_normal_08DrawingImage}" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="{StaticResource Min_focus_07DrawingImage}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="contactIntewareButton" BasedOn="{StaticResource systemButton}" TargetType="{x:Type Button}">
        <Setter Property="Background">
            <Setter.Value>
                <!-- <ImageBrush ImageSource="IconRes/Customer-service_normal.bmp"/>-->
                <ImageBrush ImageSource="{StaticResource Customer_service_normal_04DrawingImage}" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <!--    <ImageBrush ImageSource="IconRes/Customer-service_focus.bmp"/> -->
                        <ImageBrush ImageSource="{StaticResource Customer_service_focus_03DrawingImage}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="closeButton" BasedOn="{StaticResource systemButton}" TargetType="{x:Type Button}">
        <Setter Property="Background">
            <Setter.Value>
                <ImageBrush ImageSource="IconRes/Close_normal.bmp" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="IconRes/Close_focus.bmp" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MyTextBox" TargetType="TextBox">
        <Setter Property="Width" Value="112" />
        <Setter Property="Height" Value="25" />
        <Setter Property="Background" Value="#FF756550" />
        <Setter Property="BorderBrush" Value="#FFF4E9DC" />
        <Setter Property="Foreground" Value="#FFF4E9DC" />
        <Setter Property="Margin" Value="0,5,5,5" />
    </Style>

    <Style x:Key="MyLabel" TargetType="Label">
        <Setter Property="Background" Value="#FFFFFFFF" />
        <Setter Property="Foreground" Value="#FF666666" />
    </Style>

    <Style x:Key="CreatLabel" TargetType="Label">
        <Setter Property="Foreground" Value="#FF483E34" />
    </Style>

    <Style x:Key="ExpanderToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Width" Value="172" />
        <Setter Property="Height" Value="26" />
        <Setter Property="Background" Value="#FFE08A1E" />
        <Setter Property="Foreground" Value="#FFFFFFFF" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="0,0,0,1" />
        <Setter Property="Padding" Value="30,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Canvas
                      Width="{TemplateBinding Width}"
                      Height="{TemplateBinding Height}"
                      Background="{TemplateBinding Background}"
                      SnapsToDevicePixels="True">
                        <Canvas
                          x:Name="canvNormal" Canvas.Right="0"
                          Width="{TemplateBinding Width}"
                          Height="{TemplateBinding Height}"
                          Background="{TemplateBinding Background}"
                          SnapsToDevicePixels="True" Visibility="Visible">
                            <Polygon Fill="#FF70450F" Points="0,0 0,26 26,26 26,0 0,0" />
                            <Line
                              Stroke="#FFFFFFFF" StrokeThickness="1" X1="8"
                              X2="18" Y1="13" Y2="13" />
                            <Line
                              Stroke="#FFFFFFFF" StrokeThickness="1" X1="13"
                              X2="13" Y1="8" Y2="18" />
                        </Canvas>
                        <Canvas
                          x:Name="canvChecked" Canvas.Right="0"
                          Width="{TemplateBinding Width}"
                          Height="{TemplateBinding Height}"
                          Background="{TemplateBinding Background}"
                          SnapsToDevicePixels="True" Visibility="Hidden">
                            <Polygon Fill="#FF70450F" Points="0,0 0,26 26,26 26,0 0,0" />
                            <Line
                              Stroke="#FFFFFFFF" StrokeThickness="1" X1="8"
                              X2="18" Y1="13" Y2="13" />
                        </Canvas>
                        <ContentPresenter
                          Margin="{TemplateBinding Padding}"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          RecognizesAccessKey="True"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="#FFDD780B" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="canvChecked" Property="Visibility" Value="Visible" />
                            <Setter TargetName="canvNormal" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="#FFF4E9DC" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="IsExpanded" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border
                      Width="{TemplateBinding Width}"
                      Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      CornerRadius="0" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto" />
                                <RowDefinition Height="auto" />
                            </Grid.RowDefinitions>


                            <ToggleButton
                              x:Name="HeaderSite" Grid.Row="0"
                              Content="{TemplateBinding Header}"
                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                              IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              Style="{DynamicResource ExpanderToggleButtonStyle}" />
                            <ContentPresenter
                              x:Name="ExpandSite" Grid.Row="1"
                              Margin="{TemplateBinding Padding}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Content="{TemplateBinding Content}"
                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              Focusable="False" Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Scrollbar Thumbs  -->
    <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid">
                        <Rectangle
                          Width="Auto" Height="Auto" HorizontalAlignment="Stretch"
                          VerticalAlignment="Stretch" Fill="Transparent" />
                        <Border
                          x:Name="Rectangle1" Width="20" Height="Auto"
                          HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                          Background="{TemplateBinding Background}"
                          CornerRadius="10" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="Horizontal">
                            <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
                            <Setter TargetName="Rectangle1" Property="Height" Value="7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  ScrollBars  -->
    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Foreground" Value="#FF756550" />
        <Setter Property="Background" Value="#FFB3B3B3" />
        <Setter Property="Width" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0.00001*" />
                        </Grid.RowDefinitions>
                        <Border
                          x:Name="Rectangle1" Width="8" Height="Auto"
                          Margin="0,10" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                          Background="{TemplateBinding Background}"
                          CornerRadius="5" />

                        <Track
                          x:Name="PART_Track" Grid.Row="0" Focusable="false"
                          IsDirectionReversed="true">
                            <Track.Thumb>
                                <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource ScrollThumbs}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton
                                  x:Name="PageUp" Command="ScrollBar.PageDownCommand" Focusable="false"
                                  Opacity="0" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton
                                  x:Name="PageDown" Command="ScrollBar.PageUpCommand" Focusable="false"
                                  Opacity="0" />
                            </Track.DecreaseRepeatButton>
                        </Track>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                            <Setter TargetName="Thumb" Property="Background" Value="{DynamicResource ButtonSelectBrush}" />
                        </Trigger>
                        <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                            <Setter TargetName="Thumb" Property="Background" Value="{DynamicResource DarkBrush}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Width" Value="Auto" />
                            <Setter Property="Height" Value="12" />
                            <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                            <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                            <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyGroupBox" TargetType="{x:Type GroupBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0">
                            <HeaderedContentControl>
                                <ContentPresenter Margin="-5,5,0,0" ContentSource="Header" RecognizesAccessKey="True" />
                            </HeaderedContentControl>
                        </Border>
                        <Border Grid.Row="1" Margin="0,0" Background="#FFEDEDE3">
                            <ContentPresenter />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CreatCheckbox" TargetType="{x:Type CheckBox}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Foreground" Value="#FF483E34" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Click">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(FrameworkElement.Width)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="60" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(FrameworkElement.Height)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="60" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-30" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-30" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="20" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Viewbox Width="16" Height="16" FlowDirection="LeftToRight">
                            <Canvas Width="26" Height="26">
                                <Rectangle
                                  x:Name="box" Width="22" Height="22"
                                  Fill="#FFF4F4F5" Stroke="#FF483E34" />
                                <Path
                                  x:Name="path" Data="" Stretch="Fill"
                                  Stroke="Red" StrokeThickness="3" />
                                <Ellipse
                                  x:Name="InteractionEllipse" Canvas.Left="12" Canvas.Top="12"
                                  Width="0" Height="0"
                                  Fill="{TemplateBinding Foreground}"
                                  IsHitTestVisible="False" Opacity="0" RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform />
                                            <SkewTransform />
                                            <RotateTransform />
                                            <TranslateTransform />
                                        </TransformGroup>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Canvas>
                        </Viewbox>
                        <ContentPresenter
                          x:Name="contentPresenter" Grid.Column="1"
                          Margin="{TemplateBinding Padding}"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          Focusable="False" RecognizesAccessKey="True"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="ButtonBase.Click">
                            <BeginStoryboard Storyboard="{StaticResource Click}" />
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="path" Property="Opacity" Value=".26" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true" />
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="path" Property="Data" Value="M25,0 L10,18 L2,10" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CreatTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="BorderBrush" Value="#FFB3B3B3" />
        <Setter Property="Foreground" Value="#FF483E34" />
        <Setter Property="Height" Value="22" />
    </Style>

    <Style x:Key="FloderButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <Style x:Key="ClearButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="Red" />
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Content" Value="X" />
        <Setter Property="Margin" Value="0,0,1,0" />
    </Style>

    <Style x:Key="OkButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#FF756550" />
        <Setter Property="Foreground" Value="#FFF4E9DC" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFFFB14A" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CancelButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#FF756550" />
        <Setter Property="Foreground" Value="#FFF4E9DC" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFFFB14A" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>